// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package vkv is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	Configuration
	VersionMetadata
	KeyMetadata
	Version
*/
package vkv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Configuration struct {
	TTL         int64  `protobuf:"varint,1,opt,name=TTL" json:"TTL,omitempty"`
	MaxVersions uint32 `protobuf:"varint,2,opt,name=max_versions,json=maxVersions" json:"max_versions,omitempty"`
}

func (m *Configuration) Reset()                    { *m = Configuration{} }
func (m *Configuration) String() string            { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()               {}
func (*Configuration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Configuration) GetTTL() int64 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *Configuration) GetMaxVersions() uint32 {
	if m != nil {
		return m.MaxVersions
	}
	return 0
}

type VersionMetadata struct {
	// CreatedTime is when the version was created.
	CreatedTime *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// ArchiveTime is the time this version becomes invalid.
	// Set to Now() to archive the version before the configured
	// archive time.
	ArchiveTime *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=archive_time,json=archiveTime" json:"archive_time,omitempty"`
	// Destroyed is used to specify this version is
	// a has been removed and the underlying data deleted.
	Destroyed bool `protobuf:"varint,3,opt,name=destroyed" json:"destroyed,omitempty"`
}

func (m *VersionMetadata) Reset()                    { *m = VersionMetadata{} }
func (m *VersionMetadata) String() string            { return proto.CompactTextString(m) }
func (*VersionMetadata) ProtoMessage()               {}
func (*VersionMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionMetadata) GetCreatedTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *VersionMetadata) GetArchiveTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ArchiveTime
	}
	return nil
}

func (m *VersionMetadata) GetDestroyed() bool {
	if m != nil {
		return m.Destroyed
	}
	return false
}

type KeyMetadata struct {
	// Key is the key for this entry
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Versions is the map of versionID -> VersionMetadata.
	// Useful when listing all versions.
	Versions map[uint64]*VersionMetadata `protobuf:"bytes,2,rep,name=versions" json:"versions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// CurrentVersion is the latest version of the value
	CurrentVersion uint64 `protobuf:"varint,3,opt,name=current_version,json=currentVersion" json:"current_version,omitempty"`
	// OldestVersion is the oldest version of the value.
	OldestVersion uint64 `protobuf:"varint,4,opt,name=oldest_version,json=oldestVersion" json:"oldest_version,omitempty"`
	// Created time is when the metadata was created.
	CreatedTime *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// Updated time was the last time the metadata version
	// was updated.
	UpdatedTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=updated_time,json=updatedTime" json:"updated_time,omitempty"`
	// VersionTTL specifies how long to keep versions
	// around. If empty value, defaults to the configured
	// TTL for the mount.
	Version_TTL uint64 `protobuf:"varint,7,opt,name=version_TTL,json=versionTTL" json:"version_TTL,omitempty"`
	// MaxVersions specifies how many versions to keep around.
	// If empty value, defaults to the configured Max
	// for the mount.
	MaxVersions int64 `protobuf:"varint,8,opt,name=max_versions,json=maxVersions" json:"max_versions,omitempty"`
	// CasRequired specifies if the cas parameter is
	// required for this key
	CasRequired bool `protobuf:"varint,9,opt,name=cas_required,json=casRequired" json:"cas_required,omitempty"`
}

func (m *KeyMetadata) Reset()                    { *m = KeyMetadata{} }
func (m *KeyMetadata) String() string            { return proto.CompactTextString(m) }
func (*KeyMetadata) ProtoMessage()               {}
func (*KeyMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeyMetadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyMetadata) GetVersions() map[uint64]*VersionMetadata {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *KeyMetadata) GetCurrentVersion() uint64 {
	if m != nil {
		return m.CurrentVersion
	}
	return 0
}

func (m *KeyMetadata) GetOldestVersion() uint64 {
	if m != nil {
		return m.OldestVersion
	}
	return 0
}

func (m *KeyMetadata) GetCreatedTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *KeyMetadata) GetUpdatedTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedTime
	}
	return nil
}

func (m *KeyMetadata) GetVersion_TTL() uint64 {
	if m != nil {
		return m.Version_TTL
	}
	return 0
}

func (m *KeyMetadata) GetMaxVersions() int64 {
	if m != nil {
		return m.MaxVersions
	}
	return 0
}

func (m *KeyMetadata) GetCasRequired() bool {
	if m != nil {
		return m.CasRequired
	}
	return false
}

type Version struct {
	// Data is a JSON object with string keys that
	// represents the user supplied data.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// CreatedTime is when the version was created.
	CreatedTime *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=created_time,json=createdTime" json:"created_time,omitempty"`
	// ArchiveTime is the time this version becomes invalid.
	// Set to Now() to archive the version before the configured
	// archive time.
	ArchiveTime *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=archive_time,json=archiveTime" json:"archive_time,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Version) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Version) GetCreatedTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *Version) GetArchiveTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ArchiveTime
	}
	return nil
}

func init() {
	proto.RegisterType((*Configuration)(nil), "vkv.Configuration")
	proto.RegisterType((*VersionMetadata)(nil), "vkv.VersionMetadata")
	proto.RegisterType((*KeyMetadata)(nil), "vkv.KeyMetadata")
	proto.RegisterType((*Version)(nil), "vkv.Version")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0x95, 0x38, 0xdb, 0xda, 0xbf, 0x9b, 0x6d, 0xb2, 0x38, 0x44, 0x15, 0x62, 0x25, 0x12,
	0x22, 0xe2, 0x90, 0x49, 0xe3, 0x82, 0x26, 0x71, 0x02, 0x4e, 0xc0, 0x01, 0xab, 0xe2, 0x1a, 0x79,
	0x89, 0x57, 0xa2, 0x36, 0x71, 0x70, 0x9c, 0x68, 0x79, 0x16, 0x9e, 0x81, 0xa7, 0xe2, 0x45, 0x90,
	0x1d, 0xa7, 0x0d, 0x55, 0xa5, 0xaa, 0xe2, 0xe6, 0x7e, 0xfd, 0x7d, 0xce, 0xe7, 0xff, 0xff, 0x03,
	0xac, 0xba, 0x8a, 0xd7, 0x71, 0x25, 0x85, 0x12, 0x04, 0xb5, 0xeb, 0x76, 0x7e, 0xb3, 0x12, 0x62,
	0xb5, 0xe1, 0xb7, 0x46, 0x7a, 0x68, 0x1e, 0x6f, 0x55, 0x5e, 0xf0, 0x5a, 0xb1, 0xa2, 0xea, 0xa9,
	0xf0, 0x23, 0xf8, 0x1f, 0x44, 0xf9, 0x98, 0xaf, 0x1a, 0xc9, 0x54, 0x2e, 0x4a, 0x72, 0x0d, 0x68,
	0xb9, 0xfc, 0x12, 0x38, 0x0b, 0x27, 0x42, 0x54, 0x1f, 0xc9, 0x4b, 0x98, 0x15, 0xec, 0x29, 0x69,
	0xb9, 0xac, 0x73, 0x51, 0xd6, 0x81, 0xbb, 0x70, 0x22, 0x9f, 0xe2, 0x82, 0x3d, 0x7d, 0xb7, 0x52,
	0xf8, 0xdb, 0x81, 0x2b, 0xfb, 0xe3, 0x2b, 0x57, 0x2c, 0x63, 0x8a, 0x91, 0xf7, 0x30, 0x4b, 0x25,
	0x67, 0x8a, 0x67, 0x89, 0xfe, 0xa8, 0xb9, 0x11, 0xdf, 0xcd, 0xe3, 0x3e, 0x51, 0x3c, 0x24, 0x8a,
	0x97, 0x43, 0x22, 0x8a, 0x2d, 0xaf, 0x15, 0x6d, 0x67, 0x32, 0xfd, 0x91, 0xb7, 0xbc, 0xb7, 0xbb,
	0xc7, 0xed, 0x96, 0x37, 0xf6, 0xe7, 0x30, 0xcd, 0x78, 0xad, 0xa4, 0xe8, 0x78, 0x16, 0xa0, 0x85,
	0x13, 0x4d, 0xe8, 0x4e, 0x08, 0xff, 0x20, 0xc0, 0x9f, 0x79, 0xb7, 0xcd, 0x7a, 0x0d, 0x68, 0xcd,
	0x3b, 0x13, 0x71, 0x4a, 0xf5, 0x91, 0xdc, 0xc3, 0x64, 0xf4, 0x60, 0x14, 0xe1, 0xbb, 0x17, 0x71,
	0xbb, 0x6e, 0xe3, 0x91, 0x2b, 0x1e, 0x9e, 0xff, 0xa9, 0x54, 0xb2, 0xa3, 0x5b, 0x9e, 0xbc, 0x86,
	0xab, 0xb4, 0x91, 0x92, 0x97, 0x6a, 0x18, 0x9a, 0x49, 0xe0, 0xd1, 0x4b, 0x2b, 0x5b, 0x23, 0x79,
	0x05, 0x97, 0x62, 0xa3, 0x53, 0x6d, 0x39, 0xcf, 0x70, 0x7e, 0xaf, 0x0e, 0xd8, 0xfe, 0x24, 0xcf,
	0x4e, 0x9e, 0x64, 0x53, 0x65, 0x3b, 0xfb, 0xf9, 0x71, 0xbb, 0xe5, 0x8d, 0xfd, 0x06, 0xb0, 0x4d,
	0x97, 0xe8, 0x62, 0x5c, 0x98, 0x84, 0x60, 0xa5, 0x43, 0xfd, 0x98, 0x98, 0xea, 0x8c, 0xfb, 0xa1,
	0x91, 0x94, 0xd5, 0x89, 0xe4, 0x3f, 0x9b, 0x5c, 0xf2, 0x2c, 0x98, 0x9a, 0x85, 0xe0, 0x94, 0xd5,
	0xd4, 0x4a, 0xf3, 0x6f, 0xe0, 0xff, 0x33, 0xcf, 0xf1, 0x4e, 0xbc, 0x7e, 0x27, 0x6f, 0xe0, 0xac,
	0x65, 0x9b, 0x66, 0xe8, 0xc2, 0x33, 0xb3, 0x90, 0xbd, 0xda, 0xd1, 0x1e, 0xb9, 0x77, 0xdf, 0x39,
	0xe1, 0x2f, 0x07, 0x2e, 0x86, 0x19, 0x12, 0xf0, 0xf4, 0xdf, 0xe6, 0xba, 0x19, 0xf5, 0x0e, 0x36,
	0xd4, 0xfd, 0xbf, 0x86, 0xa2, 0x93, 0x1a, 0xfa, 0x70, 0x6e, 0x80, 0xb7, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x71, 0xa7, 0xd0, 0xb5, 0x03, 0x00, 0x00,
}
